unit Threads;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, System.Generics.Collections;

type
  TTestThread = class(TThread)
  private
    FTime: Integer;
    FMemo: TMemo;
    FProgressBar: TProgressBar;
  public
    constructor Create(ATime: Integer; AMemo: TMemo; AProgressBar: TProgressBar); reintroduce;
    procedure Execute; override;
    procedure SyncStart;
    procedure SyncEnd;
  end;

  TfThreads = class(TForm)
    Edit1: TEdit;
    Edit2: TEdit;
    Button1: TButton;
    Memo1: TMemo;
    ProgressBar1: TProgressBar;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fThreads: TfThreads;

implementation

{$R *.dfm}

procedure TfThreads.Button1Click(Sender: TObject);
var
  i: Integer;
  objList: TObjectList<TTestThread>;
begin
  try
    Memo1.Lines.Clear;
    ProgressBar1.Position := 0;
    ProgressBar1.Min := 0;
    ProgressBar1.Max := StrToInt(Edit1.Text) * 100;
    for i := 0 to StrToInt(Edit1.Text) do
    begin
      objList := TObjectList<TTestThread>.Create;
      objList.Add(TTestThread.Create(StrToInt(Edit2.Text), Memo1, ProgressBar1));
      objList[0].Start;
    end;
  finally
    objList.Free;
  end;
end;

procedure TfThreads.FormCreate(Sender: TObject);
begin
  Memo1.Lines.Clear;
end;

{ TTestThread }

constructor TTestThread.Create(ATime: Integer; AMemo: TMemo;
  AProgressBar: TProgressBar);
begin
  inherited Create(True);

  self.FreeOnTerminate := True;
  FTime := ATime;
  FMemo := AMemo;
  FProgressBar := AProgressBar;
end;

procedure TTestThread.Execute;
var
  i: Integer;
begin
  inherited;
  for i := 0 to 100 do
  begin
    Self.Synchronize(SyncStart);
    Sleep(Random(FTime));
    Self.Synchronize(SyncEnd);
  end;
end;

procedure TTestThread.SyncEnd;
begin
  Self.FMemo.Lines.Add(Self.ThreadID.ToString + ' - Processamento finalizado');
  Self.FProgressBar.Position := Self.FProgressBar.Position + 1;
end;

procedure TTestThread.SyncStart;
begin
  Self.FMemo.Lines.Add(Self.ThreadID.ToString + ' - Iniciando processamento');
end;

end.
